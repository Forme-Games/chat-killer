import { inspect } from 'util';

const inspectable = (klass, { serialize = () => ({}), stringify = (instance, payload, context) => (`${context.stylize(klass.name, 'special')} ${context.inspect(payload)}`) } = {}) => {
    Object.defineProperty(klass.prototype, inspect.custom, {
        value(depth, inspectContext) {
            const context = {
                stylize: inspectContext.stylize,
                inspect: (payload, options) => {
                    var _a;
                    return (inspect(payload, {
                        ...inspectContext,
                        compact: (_a = options === null || options === void 0 ? void 0 : options.compact) !== null && _a !== void 0 ? _a : false
                    }));
                }
            };
            const payload = serialize(this);
            return stringify(this, payload, context);
        }
    });
};

export { inspectable };
